## complete version of rotate pair program
## trys to find all rotate pairs in a wordlist and output to a dict

def rotate_letter(letter, n):
    """Rotates a letter by n places.  Does not change other chars.

    letter: single-letter string
    n: int

    Returns: single-letter string
    """
    if letter.isupper():
        start = ord('A')
    elif letter.islower():
        start = ord('a')
    else:
        return letter

    c = ord(letter) - start
    i = (c + n) % 26 + start # this is great for determining the position of rotated letters
    # remember when to use Residual computation!!
    return chr(i)


def rotate_word(word, n):
    """Rotates a word by n places.

    word: string
    n: integer

    Returns: string
    """
    res = ''
    for letter in word:
        res += rotate_letter(letter, n)
    return res


# if __name__ == '__main__':
#     print(rotate_word('cheer', 7))
#     print(rotate_word('melon', -10))
#     print(rotate_word('sleep', 9))

# print(rotate_word('melon', -10), rotate_word('cubed', 10), rotate_word('ibm', -1), rotate_word('hal', 1))
print(rotate_word('melon', 1), rotate_word('melon', 2))


def make_word_dict():
    """Read the words in words.txt and return a dictionary
    that contains the words as keys"""
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip().lower()
        d[word] = None

    return d


output = {}
def rotate_pairs(word, word_dict):
    """Prints all words that can be generated by rotating word.

    word: string
    word_dict: dictionary with words as keys
    """
    global output
    for i in range(1, 14):
        rotated = rotate_word(word, i)
        print(rotated)
        if rotated in word_dict:
            output[word] = rotated
            # print(word, i, rotated)


wd = {'melon':None,'cubed':None,'ibm':None, 'hal':None}

# if __name__ == '__main__':
#     # word_dict = make_word_dict()
#
#     for word in wd:
#         rotate_pairs(word, wd)
#     print(output)